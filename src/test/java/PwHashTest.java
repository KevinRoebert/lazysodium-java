/*
 * Copyright (c) Terl Tech Ltd • 03/05/18 11:37 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import com.goterl.lazycode.lazysodium.LazySodium;
import com.goterl.lazycode.lazysodium.Sodium;
import com.goterl.lazycode.lazysodium.exceptions.SodiumException;
import com.goterl.lazycode.lazysodium.interfaces.PwHash;
import com.goterl.lazycode.lazysodium.interfaces.Random;
import org.junit.Before;
import org.junit.Test;

import java.nio.charset.StandardCharsets;

import static org.junit.Assert.*;

public class PwHashTest {

    private final String PASSWORD = "catdog";
    private final byte[] PASSWORD_BYTES = PASSWORD.getBytes(StandardCharsets.UTF_8);
    private final int PASSWORD_BYTES_LEN = PASSWORD_BYTES.length;

    private LazySodium lazySodium;
    private Random random;
    private PwHash.Native pwHash;
    private PwHash.Lazy pwHashLazy;



    @Before
    public void setUp() {
        Sodium sodium = new Sodium("sodium");
        this.lazySodium = new LazySodium(sodium);
        this.random = (Random) lazySodium;
        this.pwHash = (PwHash.Native) lazySodium;
        this.pwHashLazy = (PwHash.Lazy) lazySodium;
    }

    @Test
    public void cryptoPwHashStrTestMin() {
        byte[] outputHash = new byte[PwHash.PWHASH_STR_BYTES];

        boolean success = pwHash.cryptoPwHashStr(
                outputHash,
                PASSWORD_BYTES,
                PASSWORD_BYTES_LEN,
                PwHash.PWHASH_ARGON2ID_OPSLIMIT_MIN,
                PwHash.PWHASH_ARGON2ID_MEMLIMIT_MIN
        );

        if (!success) {
            fail("cryptoPwHashStr did not succeed.");
        }

        byte[] cleanHash = lazySodium.removeNulls(outputHash);
        boolean isCorrect = pwHash.cryptoPwHashStrVerify(
                cleanHash,
                PASSWORD_BYTES,
                PASSWORD_BYTES_LEN
        );

        assertTrue("Minimum hashing failed.", isCorrect);
    }

    @Test
    public void cryptoPwHashStrTestModerate() {
        byte[] outputHash = new byte[PwHash.PWHASH_STR_BYTES];

        boolean success = pwHash.cryptoPwHashStr(
                outputHash,
                PASSWORD_BYTES,
                PASSWORD_BYTES_LEN,
                PwHash.PWHASH_ARGON2ID_OPSLIMIT_MODERATE,
                PwHash.PWHASH_ARGON2ID_MEMLIMIT_MODERATE
        );

        if (!success) {
            fail("cryptoPwHashStrTestModerate did not succeed.");
        }

        boolean isCorrect = pwHash.cryptoPwHashStrVerify(
                outputHash,
                PASSWORD_BYTES,
                PASSWORD_BYTES_LEN
        );

        assertTrue("Moderate hashing failed.", isCorrect);
    }

    // We don't test for this as it's pretty demanding and
    // will fail on most machines
    public void cryptoPwHashStrTestSensitive() {

    }


    @Test
    public void cryptoPwHashStrLazy() throws SodiumException {
        String hashed = pwHashLazy.cryptoPwHashStr(
                PASSWORD,
                PwHash.PWHASH_ARGON2ID_OPSLIMIT_MODERATE,
                PwHash.PWHASH_ARGON2ID_MEMLIMIT_MODERATE
        );
        boolean verified = pwHashLazy.cryptoPwHashStrVerify(hashed, PASSWORD);
        assertTrue("Lazy hashing failed.", verified);
    }

    @Test
    public void cryptoPwHashStrTrimmedLazy() throws SodiumException {
        String hashed = pwHashLazy.cryptoPwHashStrTrimmed(
                PASSWORD,
                PwHash.PWHASH_ARGON2ID_OPSLIMIT_MODERATE,
                PwHash.PWHASH_ARGON2ID_MEMLIMIT_MODERATE
        );


        boolean verified = pwHashLazy.cryptoPwHashStrVerify(hashed, PASSWORD);

        assertTrue("Lazy hashing failed.", verified);
    }



}
